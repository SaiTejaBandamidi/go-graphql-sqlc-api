// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createHouse = `-- name: CreateHouse :one
INSERT INTO houses (id, first_name, last_name, head_of_house) 
VALUES ($1, $2, $3, $4) RETURNING id, first_name, last_name, head_of_house
`

type CreateHouseParams struct {
	ID          string
	FirstName   string
	LastName    string
	HeadOfHouse sql.NullString
}

func (q *Queries) CreateHouse(ctx context.Context, arg CreateHouseParams) (House, error) {
	row := q.db.QueryRowContext(ctx, createHouse,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.HeadOfHouse,
	)
	var i House
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.HeadOfHouse,
	)
	return i, err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (id, first_name, last_name, age, house_id) 
VALUES ($1, $2, $3, $4, $5) RETURNING id, first_name, last_name, age, house_id
`

type CreateStudentParams struct {
	ID        string
	FirstName string
	LastName  string
	Age       sql.NullInt32
	HouseID   sql.NullString
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.HouseID,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.HouseID,
	)
	return i, err
}

const getAllHouses = `-- name: GetAllHouses :many
SELECT id, first_name, last_name, head_of_house FROM houses
`

func (q *Queries) GetAllHouses(ctx context.Context) ([]House, error) {
	rows, err := q.db.QueryContext(ctx, getAllHouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []House
	for rows.Next() {
		var i House
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.HeadOfHouse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsByHouse = `-- name: GetStudentsByHouse :many
SELECT id, first_name, last_name, age, house_id FROM students WHERE house_id = $1
`

func (q *Queries) GetStudentsByHouse(ctx context.Context, houseID sql.NullString) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsByHouse, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.HouseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
